name: Package
on: [push, pull_request]
jobs:
  node_job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 16.x ]
    steps:
      - uses: actions/checkout@v3
      - name: Install Wine
        run: |
          sudo dpkg --add-architecture i386
          wget -nc https://dl.winehq.org/wine-builds/winehq.key
          sudo apt-key add winehq.key
          sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main'
          sudo apt-get update
          sudo apt-get install --install-recommends winehq-stable
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: node package.js
  gradle_job:
    needs: node_job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v1
        with:
          arguments: build
      - name: Export jar for Windows
        uses: gradle/gradle-build-action@v1
        with:
          arguments: win_jar
      - name: Export jar for Mac
        uses: gradle/gradle-build-action@v1
        with:
          arguments: mac_jar
      - name: Export jar for Linux
        uses: gradle/gradle-build-action@v1
        with:
          arguments: linux_jar
  package_and_publish:
    needs: gradle_job
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25
        with:
          arguments: build
      - name: Zip Windows release build
        run: |
          zip -r "StarMade Launcher-win32-ia32.zip" "StarMade Launcher-win32-ia32"
      - name : Zip Mac release build
        run: |
          zip -r "StarMade Launcher-mac-x64.zip" "StarMade Launcher-darwin-x64"
      - name: Zip Linux release build
        run: |
          zip -r "StarMade Launcher-linux-x64.zip" "StarMade Launcher-linux-x64"
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: false
      - name: Upload Release Asset Windows
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID
          asset_path: ./StarMade Launcher-win32-ia32.zip
          asset_name: StarMade Launcher-win32-ia32.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID
          asset_path: ./StarMade Launcher-mac-x64.zip
          asset_name: StarMade Launcher-mac-x64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID
          asset_path: ./StarMade Launcher-linux-x64.zip
          asset_name: StarMade Launcher-linux-x64.zip
          asset_content_type: application/zip